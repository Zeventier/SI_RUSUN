#!/usr/bin/env php
<?php

/**
 * Proxy PHP file generated by Composer
 *
<<<<<<< HEAD
 * This file includes the referenced bin path (../nikic/php-parser/bin/php-parse) using ob_start to remove the shebang if present
 * to prevent the shebang from being output on PHP<8
=======
 * This file includes the referenced bin path (../nikic/php-parser/bin/php-parse) using eval to remove the shebang if present
>>>>>>> 44ccf595db7c3c3c71635086dad7d6c5b6625f30
 *
 * @generated
 */

<<<<<<< HEAD
namespace Composer;

$binPath = __DIR__ . "/" . '../nikic/php-parser/bin/php-parse';

if (PHP_VERSION_ID < 80000) {
    if (!class_exists('Composer\BinProxyWrapper')) {
        /**
         * @internal
         */
        final class BinProxyWrapper
        {
            private $handle;
            private $position;

            public function stream_open($path, $mode, $options, &$opened_path)
            {
                // get rid of composer-bin-proxy:// prefix for __FILE__ & __DIR__ resolution
                $opened_path = substr($path, 21);
                $this->handle = fopen($opened_path, $mode);
                $this->position = 0;

                // remove all traces of this stream wrapper once it has been used
                stream_wrapper_unregister('composer-bin-proxy');

                return (bool) $this->handle;
            }

            public function stream_read($count)
            {
                $data = fread($this->handle, $count);

                if ($this->position === 0) {
                    $data = preg_replace('{^#!.*\r?\n}', '', $data);
                }

                $this->position += strlen($data);

                return $data;
            }

            public function stream_cast($castAs)
            {
                return $this->handle;
            }

            public function stream_close()
            {
                fclose($this->handle);
            }

            public function stream_lock($operation)
            {
                return $operation ? flock($this->handle, $operation) : true;
            }

            public function stream_tell()
            {
                return $this->position;
            }

            public function stream_eof()
            {
                return feof($this->handle);
            }

            public function stream_stat()
            {
                return fstat($this->handle);
            }

            public function stream_set_option($option, $arg1, $arg2)
            {
                return true;
            }
        }
    }

    if (function_exists('stream_wrapper_register') && stream_wrapper_register('composer-bin-proxy', 'Composer\BinProxyWrapper')) {
        include("composer-bin-proxy://" . $binPath);
        exit(0);
    }
}

=======
$binPath = realpath(__DIR__ . "/" . '../nikic/php-parser/bin/php-parse');
$contents = file_get_contents($binPath);
$contents = preg_replace('{^#!/.+\r?\n<\?(php)?}', '', $contents, 1, $replaced);
if ($replaced) {
    $contents = strtr($contents, array(
        '__FILE__' => var_export($binPath, true),
        '__DIR__' => var_export(dirname($binPath), true),
    ));

    eval($contents);
    exit(0);
}
>>>>>>> 44ccf595db7c3c3c71635086dad7d6c5b6625f30
include $binPath;
